<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lib.Common_1.0.1.1_win10-x64</name>
    </assembly>
    <members>
        <member name="T:Lib.Common.Error">
            <Summary>Common Error messages</Summary>
        </member>
        <member name="F:Lib.Common.Error.CantBeEmpty">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.CantBeNeg">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.CantBeNull">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.CantBeNullEmpty">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.CantBeNullWhSp">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.CantBeWhSp">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.CantContWhSp">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.ErrReadingFile">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.ErrReadFileCont">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.ErrWriteFile">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.ErrWriteStrLine">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvBit">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvDate">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvDay">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvHour">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvInt">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvLogFilePath">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvMin">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvMon">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvSec">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvTime">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvTypeParam">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.InvYear">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.NotDeseriz">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.NotSeriz">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.UnkArg">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.UnkArgs">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.UnkAPI">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.UnkAPIs">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.UnkParam">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.UnkParams">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.UnkTarget">
            <remarks />
        </member>
        <member name="F:Lib.Common.Error.UnkTargets">
            <remarks />
        </member>
        <member name="T:Lib.Common.ArgumentInvalidException">
            <Summary>Common Exception</Summary>
        </member>
        <member name="M:Lib.Common.ArgumentInvalidException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentInvalidException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentInvalidException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentInvalidException.#ctor(System.String,System.Object,System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentInvalidException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.ArgumentInvalidException.ParameterName">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentInvalidException.ToErrorString">
            <remarks />
        </member>
        <member name="T:Lib.Common.ArgumentNullOrEmptyException">
            <Summary>Common Exception</Summary>
        </member>
        <member name="M:Lib.Common.ArgumentNullOrEmptyException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentNullOrEmptyException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentNullOrEmptyException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentNullOrEmptyException.#ctor(System.String,System.Object,System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentNullOrEmptyException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.ArgumentNullOrEmptyException.ParameterName">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentNullOrEmptyException.ToErrorString">
            <remarks />
        </member>
        <member name="T:Lib.Common.ArgumentNullOrWhiteSpaceException">
            <Summary>Common Exception</Summary>
        </member>
        <member name="M:Lib.Common.ArgumentNullOrWhiteSpaceException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentNullOrWhiteSpaceException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.Object,System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.ArgumentNullOrWhiteSpaceException.ParameterName">
            <remarks />
        </member>
        <member name="M:Lib.Common.ArgumentNullOrWhiteSpaceException.ToErrorString">
            <remarks />
        </member>
        <member name="T:Lib.Common.EmptyRefException">
            <Summary>Common Exception</Summary>
        </member>
        <member name="M:Lib.Common.EmptyRefException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.EmptyRefException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.EmptyRefException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.EmptyRefException.#ctor(System.String,System.Object,System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.EmptyRefException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.EmptyRefException.ReferenceName">
            <remarks />
        </member>
        <member name="M:Lib.Common.EmptyRefException.ToErrorString">
            <remarks />
        </member>
        <member name="T:Lib.Common.ExpressionException">
            <Summary>Common Exception</Summary>
        </member>
        <member name="M:Lib.Common.ExpressionException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.ExpressionException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ExpressionException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ExpressionException.#ctor(System.String,System.Object,System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ExpressionException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.ExpressionException.ActualValue">
            <remarks />
        </member>
        <member name="P:Lib.Common.ExpressionException.ExpressionName">
            <remarks />
        </member>
        <member name="M:Lib.Common.ExpressionException.ToErrorString">
            <remarks />
        </member>
        <member name="M:Lib.Common.ExpressionException.ToErrorString(System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.ExpressionException.ToErrorString(Lib.Common.ExpressionException)">
            <remarks />
        </member>
        <member name="T:Lib.Common.InvalidRefException">
            <Summary>Common Exception</Summary>
        </member>
        <member name="M:Lib.Common.InvalidRefException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.InvalidRefException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.InvalidRefException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.InvalidRefException.#ctor(System.String,System.Object,System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.InvalidRefException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.InvalidRefException.ReferenceName">
            <remarks />
        </member>
        <member name="M:Lib.Common.InvalidRefException.ToErrorString">
            <remarks />
        </member>
        <member name="T:Lib.Common.NullRefException">
            <Summary>Common Exception</Summary>
        </member>
        <member name="M:Lib.Common.NullRefException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullRefException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullRefException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullRefException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.NullRefException.ReferenceName">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullRefException.ToErrorString">
            <remarks />
        </member>
        <member name="T:Lib.Common.NullOrEmptyRefException">
            <Summary>Common Exception</Summary>
        </member>
        <member name="M:Lib.Common.NullOrEmptyRefException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullOrEmptyRefException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullOrEmptyRefException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullOrEmptyRefException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.NullOrEmptyRefException.ReferenceName">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullOrEmptyRefException.ToErrorString">
            <remarks />
        </member>
        <member name="T:Lib.Common.NullOrWhiteSpaceRefException">
            <Summary>Common Exception</Summary>
        </member>
        <member name="M:Lib.Common.NullOrWhiteSpaceRefException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullOrWhiteSpaceRefException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullOrWhiteSpaceRefException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullOrWhiteSpaceRefException.#ctor(System.String,System.Object,System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullOrWhiteSpaceRefException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.NullOrWhiteSpaceRefException.ReferenceName">
            <remarks />
        </member>
        <member name="M:Lib.Common.NullOrWhiteSpaceRefException.ToErrorString">
            <remarks />
        </member>
        <member name="T:Lib.Common.SyntaxRefException">
            <Summary>Common Exception</Summary>
        </member>
        <member name="M:Lib.Common.SyntaxRefException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.SyntaxRefException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.SyntaxRefException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.SyntaxRefException.#ctor(System.String,System.Object,System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.SyntaxRefException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.SyntaxRefException.ReferenceName">
            <remarks />
        </member>
        <member name="M:Lib.Common.SyntaxRefException.ToErrorString">
            <remarks />
        </member>
        <member name="T:Lib.Common.UnknownRefException">
            <remarks />
        </member>
        <member name="M:Lib.Common.UnknownRefException.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.UnknownRefException.#ctor(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.UnknownRefException.#ctor(System.String,System.Exception)">
            <remarks />
        </member>
        <member name="M:Lib.Common.UnknownRefException.#ctor(System.String,System.String)">
            <remarks />
        </member>
        <member name="P:Lib.Common.UnknownRefException.ReferenceName">
            <remarks />
        </member>
        <member name="M:Lib.Common.UnknownRefException.ToErrorString">
            <remarks />
        </member>
        <member name="T:Lib.Common.DataTypes.bit">
            <Summary>DataType</Summary>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.bit.#ctor(System.Byte)">
            <remarks />
            <param name="i">0 or 1</param>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.#ctor(System.String)">
            <remarks />
            <param name="s">'true' or 'false'</param>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.#ctor(System.Boolean)">
            <remarks />
            <param name="b" />
        </member>
        <member name="M:Lib.Common.DataTypes.bit.#ctor(System.Object)">
            <remarks />
            <param name="obj" />
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_Equality(Lib.Common.DataTypes.bit,Lib.Common.DataTypes.bit)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_Inequality(Lib.Common.DataTypes.bit,Lib.Common.DataTypes.bit)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_LessThanOrEqual(Lib.Common.DataTypes.bit,Lib.Common.DataTypes.bit)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_GreaterThanOrEqual(Lib.Common.DataTypes.bit,Lib.Common.DataTypes.bit)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_LessThan(Lib.Common.DataTypes.bit,Lib.Common.DataTypes.bit)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_GreaterThan(Lib.Common.DataTypes.bit,Lib.Common.DataTypes.bit)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_Explicit(System.Boolean)~Lib.Common.DataTypes.bit">
            <returns><paramref name="b"/> as Bit</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_Explicit(System.Int32)~Lib.Common.DataTypes.bit">
            <returns><paramref name="s"/> as Bit</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_Explicit(System.String)~Lib.Common.DataTypes.bit">
            <returns><paramref name="s"/> as Bit</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_Explicit(Lib.Common.DataTypes.bit)~System.Boolean">
            <returns><paramref name="b"/> as a bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_Explicit(Lib.Common.DataTypes.bit)~System.Int32">
            <returns><paramref name="b"/> as a bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_Explicit(Lib.Common.DataTypes.bit)~System.String">
            <returns><paramref name="b"/> as a string</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_Implicit(System.Byte)~Lib.Common.DataTypes.bit">
            <returns><paramref name="b"/> as Bit</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.op_Implicit(Lib.Common.DataTypes.bit)~System.Byte">
            <returns><paramref name="b"/> as integer</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.CompareTo(System.Object)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.bit.Equals(Lib.Common.DataTypes.bit)">
            <summary>Compares this Bit to <paramref name="b"/></summary><param name="b" /><returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.Equals(System.Object)">
            <summary>Compares this Bit to <paramref name="obj"/></summary><param name="obj" /><returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.GetHashCode">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.bit.ToBoolean">
            <returns>This bit as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.ToInt32">
            <returns>This bit as int</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.ToString">
            <returns>This bit as string</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.ToString(System.String)">
            <returns>This bit as string with requested <paramref name="format"/></returns>
            <param name="format">e.g. 'g", or 'G'</param>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.ToString(System.String,System.IFormatProvider)">
            <returns>This bit as string with requested <paramref name="format"/> and <paramref name="provider"/></returns>
            <param name="format">e.g. 'g", or 'G'</param>
            <param name="provider">e.g. 'da-DK' for danish</param>
        </member>
        <member name="M:Lib.Common.DataTypes.bit.Validate">
            <remarks />
        </member>
        <member name="T:Lib.Common.DataTypes.Date">
            <Summary>DataType</Summary>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.#ctor(Lib.Common.DataTypes.Date)">
            <param name="date" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.#ctor(System.DateTime)">
            <param name="dt" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.#ctor(System.Int32,System.Int32,System.Int32)">
            <remarks /><param name="year" /><param name="month" /><param name="day" /><exception cref="T:Lib.Common.ArgumentInvalidException" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.#ctor(System.String,System.String,System.String)">
            <param name="year" /><param name="month" /><param name="day" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.#ctor(System.String)">
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" /><exception cref="T:Lib.Common.ArgumentInvalidException" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.op_Equality(Lib.Common.DataTypes.Date,Lib.Common.DataTypes.Date)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.op_Inequality(Lib.Common.DataTypes.Date,Lib.Common.DataTypes.Date)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.op_GreaterThanOrEqual(Lib.Common.DataTypes.Date,Lib.Common.DataTypes.Date)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.op_LessThanOrEqual(Lib.Common.DataTypes.Date,Lib.Common.DataTypes.Date)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.op_GreaterThan(Lib.Common.DataTypes.Date,Lib.Common.DataTypes.Date)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.op_LessThan(Lib.Common.DataTypes.Date,Lib.Common.DataTypes.Date)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.op_Explicit(System.DateTime)~Lib.Common.DataTypes.Date">
            <returns><paramref name="dt"/> as Date</returns><param name="dt" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.op_Explicit(Lib.Common.DataTypes.Date)~System.DateTime">
            <returns><paramref name="date"/> as DateTime</returns><param name="date" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.op_Implicit(System.String)~Lib.Common.DataTypes.Date">
            <returns><paramref name="date"/> as Date</returns><param name="date" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.op_Implicit(Lib.Common.DataTypes.Date)~System.String">
            <returns><paramref name="date"/> as string</returns><param name="date" />
        </member>
        <member name="P:Lib.Common.DataTypes.Date.Value">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.Clone(Lib.Common.DataTypes.Date)">
            <returns>Identical copy of <paramref name="date"/></returns><param name="date" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.Equals(Lib.Common.DataTypes.Date,Lib.Common.DataTypes.Date)">
            <returns>Result as bool</returns><param name="date1" /><param name="date2" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.IsEmpty(Lib.Common.DataTypes.Date)">
            <returns>Result as bool</returns><param name="date" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.IsLeapYear(System.String)">
            <remarks /><param name="year">Four digit integer within the range [1900;9999]</param>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.IsLeapYear(System.Decimal)">
            <returns>Result as bool</returns><param name="year">Four digit integer within the range [1900;9999]</param><exception cref="T:Lib.Common.ArgumentInvalidException" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.IsValid(Lib.Common.DataTypes.Date)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.IsValid(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToString(Lib.Common.DataTypes.Date)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToFourCharString(System.Int32)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToFourCharString(System.String)">
            <returns><paramref name="s"/> as four character string</returns><param name="s" /><exception cref="T:Lib.Common.ArgumentInvalidException" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToTwoCharString(System.Int32)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToTwoCharString(System.String)">
            <returns><paramref name="s"/> as two character string</returns><param name="s" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.AddDays(System.Int32)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.AddDays(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.AddMonths(System.Int32)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.AddMonths(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.AddYears(System.Int32)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.AddYears(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.Clone">
            <returns>Identical copy of this <see cref="T:Lib.Common.DataTypes.Date"/></returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.CompareTo(System.Object)">
            <remarks /><param name="obj" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.Equals(Lib.Common.DataTypes.Date)">
            <returns>Result as bool</returns><param name="date" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.Equals(System.Object)">
            <returns>Result as bool</returns><param name="obj">Date</param>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.GetHashCode">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.GetTypeCode">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.IsEmpty">
            <returns>'true' if this Date is equal to '2010-01-01' - else 'false'</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.IsLeapYear">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.IsValid">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToBoolean(System.IFormatProvider)">
            <returns>This Date as bool</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToByte(System.IFormatProvider)">
            <returns>This Date as byte</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToChar(System.IFormatProvider)">
            <returns>This Date as char</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToDateTime">
            <returns>This Date as DateTime</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToDateTime(System.IFormatProvider)">
            <returns>This Date as DateTime</returns><param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToDecimal(System.IFormatProvider)">
            <returns>This Date as DateTime</returns><param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToDouble(System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToInt16(System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToInt32(System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToInt64(System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToSByte(System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToSingle(System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToString">
            <returns>This Date as string</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToString(System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToString(System.String)">
            <returns>This Date as string with requested <paramref name="format"/></returns>
            <param name="format">Date format as a <see cref="T:System.String"/> - e.g. 'd", 'D', and 'g'</param>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToString(System.String,System.IFormatProvider)">
            <returns>This Date as string with requested <paramref name="format"/> and <paramref name="provider"/></returns>
            <param name="format">Date format as a <see cref="T:System.String"/> - e.g. 'd", 'D', and 'g'</param>
            <param name="provider">Format provider as a <see cref="T:System.String"/> - e.g. 'da-DK' for danish</param>
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToType(System.Type,System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="conversionType" />
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToUInt16(System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToUInt32(System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="provider" />
        </member>
        <member name="M:Lib.Common.DataTypes.Date.ToUInt64(System.IFormatProvider)">
            <returns>This Date as DateTime</returns>
            <param name="provider" />
        </member>
        <member name="T:Lib.Common.DataTypes.Time">
            <Summary>DataType</Summary>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.#ctor">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.#ctor(System.DateTime)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.#ctor(System.Int32,System.Int32,System.Int32)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.#ctor(System.String,System.String,System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.#ctor(System.String)">
            <remarks /><exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.#ctor(Lib.Common.DataTypes.Time)">
            <remarks /><exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.op_Equality(Lib.Common.DataTypes.Time,Lib.Common.DataTypes.Time)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.op_Inequality(Lib.Common.DataTypes.Time,Lib.Common.DataTypes.Time)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.op_GreaterThanOrEqual(Lib.Common.DataTypes.Time,Lib.Common.DataTypes.Time)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.op_LessThanOrEqual(Lib.Common.DataTypes.Time,Lib.Common.DataTypes.Time)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.op_GreaterThan(Lib.Common.DataTypes.Time,Lib.Common.DataTypes.Time)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.op_LessThan(Lib.Common.DataTypes.Time,Lib.Common.DataTypes.Time)">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.op_Explicit(System.DateTime)~Lib.Common.DataTypes.Time">
            <returns><paramref name="dt"/> as Time</returns><param name="dt" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.op_Explicit(Lib.Common.DataTypes.Time)~System.DateTime">
            <returns><paramref name="time"/> as DateTime</returns><param name="time" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.op_Implicit(System.String)~Lib.Common.DataTypes.Time">
            <returns><paramref name="time"/> as Date</returns><param name="time" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.op_Implicit(Lib.Common.DataTypes.Time)~System.String">
            <returns><paramref name="time"/> as string</returns><param name="time" />
        </member>
        <member name="P:Lib.Common.DataTypes.Time.Value">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.Clone(Lib.Common.DataTypes.Time)">
            <returns>Copy of <paramref name="time"/></returns><param name="time" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.Equals(Lib.Common.DataTypes.Time,Lib.Common.DataTypes.Time)">
            <returns>Result as bool</returns><param name="time1" /><param name="time2" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.IsEmpty(Lib.Common.DataTypes.Time)">
            <returns>Result as bool</returns><exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.IsValid(System.String)">
            <returns>Result as bool</returns><param name="time">Time in the format 'HH:mm:ss'</param><exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToString(Lib.Common.DataTypes.Time)">
            <returns><paramref name="time"/> as string</returns><param name="time" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToTwoCharString(System.String)">
            <returns><paramref name="s"/> as two character string</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToTwoCharString(System.Int32)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.AddHours(System.Int32)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.AddHours(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.AddMinutes(System.Int32)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.AddMinutes(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.AddSeconds(System.Int32)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.AddSeconds(System.String)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.Clone">
            <returns>Identical copy of this <see cref="T:Lib.Common.DataTypes.Time"/></returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.CompareTo(System.Object)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.Equals(Lib.Common.DataTypes.Time)">
            <returns>Result as bool</returns><param name="time" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.Equals(System.Object)">
            <returns>Result as bool</returns><param name="obj" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.GetHashCode">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.GetTypeCode">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.IsEmpty">
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToBoolean(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToByte(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToChar(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToDateTime">
            <returns>Result as DateTime</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToDateTime(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToDecimal(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToDouble(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToInt16(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToInt32(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToInt64(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToSByte(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToSingle(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToString">
            <returns>This Time as string</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToString(System.IFormatProvider)">
            <returns>This Time as string</returns>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToString(System.String)">
            <returns>This Time as string with requested <paramref name="format"/></returns><param name="format">'d", 'D', or 'g'</param>
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToString(System.String,System.IFormatProvider)">
            <returns>This Time as string with requested <paramref name="format"/> and <paramref name="provider"/></returns><param name="format">E.g. 'd", 'D', or 'g'</param><param name="provider">E.g. 'da-DK' for danish</param>
            <exception cref="T:System.FormatException" />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToType(System.Type,System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToUInt16(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToUInt32(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="M:Lib.Common.DataTypes.Time.ToUInt64(System.IFormatProvider)">
            <remarks />
        </member>
        <member name="T:Lib.Common.Sql.DbConn">
            <remarks/>
        </member>
        <member name="M:Lib.Common.Sql.DbConn.DbReturnArrayListString(System.String,System.String)">
            <returns>Response to <paramref name="query"/> from database as an ArrayList</returns>
            <param name="conn">Connection string</param>
            <param name="query">SQL-query</param>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Sql.DbConn.DbReturnDataTable(System.String,System.String)">
            <returns>Response to <paramref name="query"/> from database as a <see cref="T:System.Data.DataTable"/></returns>
            <param name="conn">Connection string</param>
            <param name="query">SQL-query</param>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Sql.DbConn.DbReturnDataTable(System.Data.SqlClient.SqlCommand)">
            <returns>Response to <paramref name="cmd"/> from database as a <see cref="T:System.Data.DataTable"/></returns>
            <param name="cmd">SqlCommand</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Lib.Common.Sql.DbConn.DbReturnDataTableFromStoredProcedure(System.String,System.String,System.String[])">
            <returns>Response to <paramref name="proc"/> from database as a <see cref="T:System.Data.DataTable"/></returns>
            <param name="conn">Connection string</param>
            <param name="proc">Name of Stored procedure</param>
            <param name="args">string - @InstitutionIdentifier, @OrganizationStructureIdentifier or @OrganizationIdentifier</param>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Sql.DbConn.DbReturnListString(System.String,System.String)">
            <returns>Response to <paramref name="query"/> from database as a List{string}</returns>
            <param name="conn">Connection string</param>
            <param name="query">SQL-query</param>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Sql.DbConn.DbReturnBool(System.String,System.String)">
            <returns>Response to <paramref name="query"/> as a <see cref="T:System.Boolean"/></returns>
            <param name="conn">Connection string</param>
            <param name="query">SQL-query</param>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Sql.DbConn.DbReturnBool(System.String,System.String,System.String[])">
            <returns>Response to <paramref name="query"/> from database as a <see cref="T:System.Boolean"/></returns>
            <param name="conn">Connection string</param>
            <param name="query">SQL-query</param>
            <param name="args"><see cref="T:System.String"/>[]</param>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Lib.Common.Sql.DbConn.FunctionExecuteNonQuery(System.String,System.String)">
            <summary>Sends an <paramref name="query"/> to database</summary>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
            <param name="conn">Connection string</param>
            <param name="query">SQL-query</param>
            <returns>Result as <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Lib.Common.Sql.Executor">
            <remarks/>
        </member>
        <member name="M:Lib.Common.Sql.Executor.ReadListFromDataBase(System.String,System.String,System.Int32)">
            <returns>List{strings} from <paramref name="table"/> in database</returns>
            <param name="conn">Connection string</param>
            <param name="table">Name of database table</param> />
            <param name="id" />
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Sql.Executor.ReadListFromDataBaseFromStoredProcedure(System.String,System.String,System.String[])">
            <returns>List{strings} from <paramref name="proc"/> in database</returns>
            <param name="conn">Connection string</param>
            <param name="proc">Name of Stored procedure</param>
            <param name="args">e.g. @InstitutionIdentifier, @OrganizationStructureIdentifier or @OrganizationIdentifier</param>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Sql.Executor.WriteToDataBase(System.String,System.String)">
            <summary>Sends <paramref name="query"/> to database</summary>
            <param name="conn">Connection string</param>
            <param name="query">SQL-query</param>
            <returns>Result as <see cref="T:System.Boolean"/></returns>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Sql.Executor.GetListDataTable(System.String,System.String,System.Int32)">
            <returns>List from <paramref name="table"/> as a <see cref="T:System.Data.DataTable"/></returns>
            <param name="conn">Connection string</param>
            <param name="table">Database table name</param>
            <param name="id">if id>=0 selects specific entry in table; else selects all entries</param>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="T:Lib.Common.Disc.DiscAccess">
            <summary>Logic for simple disc access</summary>
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.CreateFile(System.String)">
            <summary>Creates a file on disk</summary>
            <param name="path">File path</param>
            <returns>Result as bool</returns>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.CreateFolder(System.String)">
            <summary>Creates a folder on disk</summary>
            <param name="path">Folder path</param>
            <returns>Result as bool</returns>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.CreateDashString(System.Int32)">
            <returns><see cref="T:System.String"/> containing the requested amount of dashes</returns>
            <param name="dashes">input int</param>
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.FileExist(System.String)">
            <summary>Checks wether a file exists on disk</summary>
            <param name="path">File path</param>
            <returns>Result as bool</returns>
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.FolderExist(System.String)">
            <summary>Checks wether a folder exists on disk</summary>
            <param name="path">Folder path</param>
            <returns>Result as bool</returns>
            <exception cref="T:Lib.Common.ArgumentNullOrWhiteSpaceException" />
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.ReadStringArrayFromFile(System.String)">
            <returns>Content of <paramref name="path"/> as string[]</returns>
            <param name="path">File path</param>
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.ReadStringFromFile(System.String)">
            <returns>Content of <paramref name="path"/> as <see cref="T:System.String"/></returns>
            <param name="path">File path</param>
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.RetrieveDashedStringConsole(System.String)">
            <returns><paramref name="s"/> extended with dashes intended for Console as string</returns>
            <param name="s" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.RetrieveDashedStringLog(System.String)">
            <returns><paramref name="s"/> extended with dashes intended for log file as string</returns>
            <param name="s" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.WriteStringToFile(System.String,System.String,System.Text.Encoding)">
            <summary>Writes the <paramref name="content"/> to <paramref name="path"/></summary><param name="path">File pame</param><param name="content">File content</param><param name="encoding" />
        </member>
        <member name="M:Lib.Common.Disc.DiscAccess.WriteStringLineToFile(System.String,System.String,System.Text.Encoding)">
            <summary>Adds <paramref name="content"/> to specified <paramref name="path"/></summary><param name="path">File path</param><param name="content">Line content</param><param name="encoding" />
        </member>
    </members>
</doc>
